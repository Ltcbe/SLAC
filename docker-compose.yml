version: "3.9"
services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - slac_pg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    # Pour prod, uvicorn suffit; tu peux passer à plusieurs workers si besoin
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8000/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5

  collector:
    build: ./collector
    env_file: .env
    depends_on:
      backend:
        condition: service_started
    command: ["python", "-m", "slac_collector.main"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      backend:
        condition: service_started
    # En local -> http://localhost:5173 ; sur Dokploy, retire "ports" et configure le domaine/port dans l’UI
    ports:
      - "5173:80"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1/"]
      interval: 15s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

volumes:
  slac_pg:
